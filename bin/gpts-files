#!/usr/bin/env node

const os = require('os');
const { spawn } = require('child_process');
const path = require('path');

// Detect platform and architecture
const platform = os.platform();
const arch = os.arch();

// Map platform and architecture to binary name
let binaryName;

function getBinaryName() {
    // Architecture mapping
    const architecture = arch === 'arm64' ? 'arm64' : 'x86_64';

    switch (platform) {
        case 'darwin':
            return `gpts-files-${architecture}-macos`;
        case 'linux':
            return `gpts-files-${architecture}-linux`;
        default:
            console.error('Unsupported platform:', platform);
            console.error('Current platform:', platform);
            console.error('Current architecture:', arch);
            process.exit(1);
    }
}

try {
    binaryName = getBinaryName();
    console.log(`Using binary: ${binaryName} (${platform}-${arch})`);

    // Construct path to the binary
    const binaryPath = path.join(__dirname, '..', 'dist', binaryName);

    // Forward all arguments to the binary
    const child = spawn(binaryPath, process.argv.slice(2), {
        stdio: 'inherit'
    });

    child.on('error', (err) => {
        if (err.code === 'ENOENT') {
            console.error(`Binary not found: ${binaryPath}`);
            console.error(`Please ensure the correct binary is installed for your platform (${platform}) and architecture (${arch})`);
        } else {
            console.error('Failed to start binary:', err);
        }
        process.exit(1);
    });

    child.on('exit', (code) => {
        process.exit(code);
    });
} catch (error) {
    console.error('Error:', error.message);
    console.error('Platform:', platform);
    console.error('Architecture:', arch);
    process.exit(1);
}